자바 8 인액션 - 효과적인 자바 8 프로그래밍

Part 3
	8장 	: 리팩토링, 테스팅, 디버깅
	9장 	: 디폴트 메서드
	10장	: null 대신 Optional
	11장	: Completablefuture : 조합할 수 있는 비동기 프로그래밍
	12장	: 새로운 날짜와 시간 API

 Chapter 8. 리팩토링 , 테스팅, 디버깅
- 람다 표현식으로 코드 리팩토링 하기
- 람다 표현식이 객체지향 설계 패턴에 미치는 영향
- 람다 표현식 테스팅
- 람다 표현식 스트림 API 사용 코드 디버깅. /259p

 8.1 가독성과 유연성을 개선하는 리팩토링
 - 람다 표현식은 익명 클래스보다 코드를 좀 더 간결하게 만든다.

 8.1.1 코드 가독성 개선

 코드 가독성이란 '어떤 코드를 다른 사람도 쉽게 이해할 수 있음' 을 의미한다.
 8.1 절에서는 3가지 리팩토링 예제를 소개한다.
 	- 익명 클래스를 람다 표현식으로 리팩토링하기
 	- 람다 표현식을 메서드 레퍼런스로 리팩토링 하기
 	- 명령형 데이터 처리를 스트림으로 리팩토링 하기

 8.1.2 익명 클래스를 람다 표현식으로 리팩토링 하기.
 	하나의 추상 메서드를 구현하는 익명 클래스는 람다 표현식으로 리팩토링 할 수 있다.

 	예를 들어 3장에서는 Runnable 객체를 만드는 익명 클래스와 이에 대응하는 람다 표현식을 비교했다.

 	Runnable r1 = new Runnable() {
 		public void run() {
 			System.out.println("Hello");
 		}
 	};
 	// 익명 클래스를 사용한 이전 코드

 	Runnable r2 = () -> System.out.println("Hello"); <- 람다 표현식을 사용한 최신 코드

 모든 익명클래스를 람다 표현식으로 변환할 수 잇는것은 아니다.
 	1. 익명 클래스에서 사용한 this, super 는 람다 표현식에서 다른 의미를 갖는다.
 	익명 클래스에서 this 는 클래스 자신을 가리키지만 람다에서 this 는 람다를 감싸는 클래스를 가리킨다.

 	2. 익명 클래스는 감싸고 있는 클래스의 변수를 가릴 수 있다. (섀도 변수 shadow variable) 하지만 다음 코드에서 보여주는 것처럼
 	람다 표현식으로 변수를 가릴 수 없다.(아래 코드는 컴파일 되지 않는다.)

 	int a = 10;
 	Runnable r1 = () -> {
 		int a= 2;
 		System.out.println(a);
 	}

 	// 컴파일 에러

 	Runnable r2 = new Runnable() {
 		public void run() {
 			int a = 2;
 			System.out.println(a);
 		}
 	};

 	// 모든것이 정상 작동.

 마지막으로 익명 클래스를 람다 표현식으로 바꾸면 콘텍스트 오버로딩에 따른 모홈함이 초래 될 수 있다.
 익명 클래스는 인스턴스화 할 때 명시적으로 형식이 정해지는 반면 람다의 형식은 콘텍스트에 따라 달라지기 때문이다.
 다음은 문제가 일어날 수 있는 예제이다.

 	interface Task {
 		public void execute();
 	}

 	public static void doSomething(Runnable r) { r.run(); }
 	public static void doSomething(Task a) { r.execute();}

 	Task 를 구현하는 익명클래스를 전달 할 수 있다.
 	doSomething(new Task() {
 		public void execute() {
 			System.out.println("Danger danger!!");
 		}
 	});

 	하지만 익명 클래스를 람다 표현식으로 바꾸면 메서드를 호출 할때 Runnable 과 Task 모두 대상 형식이 될 수 있으므로 모호함이 발생한다.
 	doSomething(() -> System.out.println("Danger danger!!"));   		<- doSomething(Task), doSomething(Runnable) 중 어느것인지 모호함

 	하지만 IntelliJ 를 사용하면 이와 같은 문제는 자동으로 해결된다.

 8.1.3 람다 표현식을 메서드 레퍼런스로 리팩토링 하기.
  람다 표현식은 쉽게 전달할 수 있는 짧은 코드이다. 예를 들어 6장에서 소개했던 칼로리 수준으로 요리를그룹화 하는 코드다.

  Map<CaloricLevel, List<Dish>> dishesByCaloricLevel =
  		menu.stream().collect(
  				groupingBy(dish -> {
  					if (dish.getCalories() <= 400) return CaloricLevel.DIET;
  					else if (dish.getCalories() <= 700) return CaloricLevel.NORMAL;
  					else return CaloricLevel.FAT;
  				}));

 람다 표현식을 별도의 메서드로 추출한 다음에 groupingBy 에 인수로 전달 할 수 있다.

 Map<CaloricLevel, List<Dish>> dishesByCaloricLevel =
 			menu.stream().collect(groupingBy(Dish::getCalories));
 		✔ ︎람다 표현식을 메서드로 구현 했다.
 이제 Dish 클래스에 getCalories 메서드를 추가해야 한다.

 public class Dish {
 	...
 	public CaloricLevel getCalories() {
 		if (this.getCalories() <= 400) return CaloricLevel.DIET;
 		else if (this.getCalories() <= 700) return CaloricLevel.NORMAL;
 		else return CaloricLevel.FAT;
 	}
 }

 또한 comparing 과 maxBy 같은 정적 헬퍼 메서드를 활용하는 것도 좋다.
 3장에서 살펴본 것처럼 람다 표현식보다는 메서드 레퍼런스가 코드의 의도를 명확하게 보여준다.

 inventory.sort(
 	(Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight()));	<- 비교 구현에 신경 써야 한다.

 inventory.sort(comparing(Apple::getCalories)); <- 코드가 문제 자체를 설명한다.

 sum, maximum 등 자주 사용하는 리듀싱 연산을 메서드 레퍼런스와 함꼐 사용할 수 있는 내장 헬퍼 메서드를 제공한다.

 8.1.4 명령형 데이터 처리를 스트림으로 리팩토링 하기.
  이론적으로 반복자를 이용한 기존의 모든 컬렉션 처리 코드를 스트림 API 로 바꿔야 한다. 이유가 뭘까??
 스트림 API 는 데이터 처리 파이프라인의 의도를 명확하게 보여준다. 스트림은 5장에서 설명한 것처럼 쇼트서킷 과 게으름 이라는 강력한 최적화 뿐아니라 멀티코어 아키텍처를 활용할 수 있는 지름길이다.

 예를 들어 명령형 코드는 두가지 패턴(필터링, 추출) 으로 엉킨 코드다. 이코드를 접한 프로그래머는 전체 구현을 자세히 살펴본 이후에야 전체 코드의 의도를 이해할 수 있다.
 게다가 이 코드를 병렬로 실행시키는 것은 매우 어렵다.

 List<String> dishNames = new ArrayList<>();
 for(Dish dish: menu) {
 	if (dish.getCalories > 300) {
 		dishNames.add(dish.getName());
 	}
 }

스트림 API 를 이용하면 문제를 더 직접적으로 기술할 수 있을 뿐 아니라 쉽게 병렬화할 수 있다.

menu.parallelStream()
	.filter(d -> d.getCalories() > 300)
	.map(Dish::getName)
	.collect(toList());


8.1.5 코드 유연성 개선
 '함수형 인터페이스 적용'
  - 먼저 람다 표현식을 이용하려면 함수형 인터페이스가 필요하다.
  조건부 연기실행, 실행 어라운드 두가지 자주 사용하는 패턴으로 람타 표현식 리팩토링을 살펴본다.

  '조건부 연기 실행'
  실제 작업을 처리하는 코드 내부에 제어 흐름문이 복잡하게 얽힌 코드를 흔히 볼 수 잇다. 흔히 보안검사나 로깅 관련 코드는 이처럼 사용된다.

  if (logger.isLoggable(Log.FINER)) {
  		logger.finer("Problem: " + generateDiagnostic());
  }

 위 코드는 문제가 있다.
 	1. logger 의 상태가 isLoggable 이라는 메서드에 의해 클라이언트 코드로 노출된다.
 	2. 메세지를 로깅할 때마다 logger 객체의 상태를 매번 확인해야 할까? 이들은 코드를 어지럽힐 뿐이다.

 logger.log(Level.FINER, "Problem " + generateDiagnostic());  <- 덕분에 불필요한 if 문을 제거할 수 있었다.

 이 코드는 logger 가 활성화 되지 않더라도 항상 로깅메세지를 평가하게 된다.

 람다를 이용하면 이 문제를 쉽게 해결할 수 있다. 특정조건 (예제에서는 logger 수준을 FINER 로 설정)

다음은 새로 추가된 log 메서드의 시그너처다.
public void log(Level level, Supplier<String> msgSupplier)

logger.log(Level.FINER, () -> "Problem " + generateDiagnostic()); 다음처럼 log 메서드를 호출할 수 있다.

log 메서드는 logger 수준이 적절하게 설정되어 있을때만 인수로 넘겨진 람다를 내부적으로 실행한다.
다음은 log 메서드의 내부 구현코드다.

// () -> "Problem " + generateDiagnostic() <- Supplier

public void log(Level level, Supplier<String> msgSupplier) {
	if (Logger.isLoggable(level)) {
		log(level, msgSupplier.get());
	}
}


'실행어라운드'

String oneLine =
	processFile ((BufferedReader b) -> b.readLine()); <- 람다 전달

String twoLine =
	processFile ((BufferedReader b) -> b.readLine() + b.readLine)); <- 다른 람다 전달.

public static String processFile(BufferedReaderProcessor p) throws IOexception {
	try (BufferedReader br = new BufferedReader(new FileReader("java8inaction/cahp8/data.txt"))) {
		return p.process(br);
	}
}

8.2 람다로 객체지향 디자인 패턴 리팩토링 하기. / 267p

8.2.1 전략
전략 패턴은 한 유형의 알고리즘을 보유한 상태에서 런타임에 적절한 알고리즘을 선택하는 기법이다.

전략 패턴은 3부분으로 구성된다.
- 알고리즘을 나타내는 인터페이스 (Strategy 인터페이스)
- 다양한 알고리즘을 나타내는 한 개 이상의 인터페이스 구현 (ConcreteStrategy A, ConcreteStrategy B)
- 전략 객체를 사용하는 한개 이상의 클라이언트

예를 들어 오직 소문자 또는 숫자로 이루어져야 하는등 텍스트 입력이 다양한 조건에 맞게 포맷되었는지 검증한다면

public interface ValidationStrategy {
	boolean execute(String s);
}


public class isAllLowerCase implements ValidationStrategy {
	public boolean execute(String s) {
		return s.match("[a-z]+");
	}
}

public class inNumeric implements ValidationStrategy {
	public boolean execute(String s) {
		return s.match("\\d+");
	}
}

public class Validator {
	private final ValidationStrategy strategy;

	public Validator(ValidationStrategy v) {
		this.strategy = v;
	}

	public boolean validate(String s) {
		return strategy.execute(s);
	}
}

Validator numericValidator = new Validator(new IsNumeric());
boolean b1 = numericValidator.validate("aaaa"); <- false

Validator lowerCaseValidator = new Validator(new IsAllLowerCase());
boolean b2 = lowerCaseValidator.validate("bbbb"); <- true

람다 표현식 사용

Validator numericValidator =
		new Validator((String s) s -> s.match("[a-z]+");

boolean b1 = numericValidator.validate("aaaa");

Validator lowerCaseValidator =
		new Validator((String s) -> s.match("\\d+"));

boolean b2 = lowerCaseValidator.validate("bbbb");

8.2.2 템플릿 메서드

abstract class OnlineBanking {
	public void processCustomer(int id) {
		Customer c = Database.getCustomerWithId(id);
		makeCustomerHappy(C);
	}

	abstract void makeCustomerHappy(Customer c);
}

processCustomer 메서드는 온라인 뱅킹 알고리즘이 해야 할 일을 보여준다.

public void processCustomer(int id, Consumer<Customer> makeCustomerHappy) {
	Customer c = Database.getCustomerWithId(id);
	makeCustomerHappy.accept(c);
}

new OnlineBankingLambda().processCustomer(1337, (Customer) ->
	System.out.println("Hello" + c.getName()));

8.2.3 옵저버
어떤 이벤트가 발생했을때 다른 객체리스트에 자동으로 알림을 보내야 하는 상황에서 옵저버 디자인 패턴을 사용한다.
GUI 애플리케이션에서 옵저버 패턴이 자주 등장한다.

옵저버 패턴으로 트위터와 같은 커스터마이즈된 알림 시스템을 설계하고 구현할 수 있다.
interface Observer {
	void notify(String tweet);
}

이제 트윗에 포함된 다양한 키워드에 다른 동작을 수행할 수 있는 여러 옵저버를 정의할 수 있다.

class NYTimes implements Observer {
	public void notify(String tweet) {
		if (tweet != null && tweet.contain("money")) {
			System.out.println("Breaking news in NY!" + tweet);
		}
	}
}

class Guardian implements Observer {
	public void notify(String tweet) {
		if (tweet != null && tweet.contain("queen")) {
			System.out.println("Yet another news in London..." + tweet);
		}
	}
}

class Lemonde implements Observer {
	public void notify(String tweet) {
		if (tweet != null && tweet.contain("wine")) {
			System.out.println("Today cheese, wine and news!" + tweet);
		}
	}
}


interface Subject {
	void registerObserver(Observer o);
	void notifyObservers(String tweet);
}

주제는 registerObserver 메서드로 새로운 옵저버를 등록한 다음에 notifyObservers
메서드로 트윗의 옵저버에 이를 알린다.

class Feed implements Subject {
	println final List<Observer> Observers = Lists.newArrayList();

	public void registerObserver(Observer o) {
		this.Observer.add(o);
	}

	public void notifyObservers(String tweet) {
		Observer.forEach(o -> o.notify(tweet));
	}
}

Feed f = new Feed();
f.registerObserver(new NYTimes());
f.registerObserver(new Guardian());
f.registerObserver(new Lemonde());

f.notifyObservers("The queen said her favourite book is Java 8 in Action!");

Chapter 9. 디폴트 메서드
 9.2 디폴트 메서드란 무엇인가?

 자바 8에서는 호환성을 유지하면서 API 를 바꿀수 있는 새로운 기능인 디폴트 메서드를 제공한다.
 인터페이스를 구현하는 클래스에서 구현하지 않은 메서드는 인터페이스 자체에서 기본으로 제공한다(디폴트 메서드)

 디폴트 메서드는 default 라는 키워드로 시작하며, 다른 클래스에 선언된 메서드처럼 바디를 포함한다.

 9.3 디폴트 메서드 활용
 디폴트 메서드를 이용하는 2가지 방식
 	1. 선택형 메서드 (optional method)
 	2. 동작 다중 상속 (multiple inheritance of behavior)

 9.3.1 선택형 메서드
	interface Iterator<T> {
		boolean hasNext();
		T next();
		default void remove() {
			throw new UnsupportedOperationException();
		}
	}


9.3.2 동작 다중 상속
	다중상속을 이용해서 기존 코드를 재사용할 수 잇다.

	'옳지 못한 상속'
	예를 들어 한개의 메서드를 재사용하려고 100개의 메서드와 필드가 정의되어 있는 클래스를 상속받는 것은 좋지않다.
	이럴때는 delegation, 즉 멤버 변수를 이용해서 클래스에서 필요한 메서드를 직접호출하는 메서드를 작성하는것이 좋다.
	즉,종종 'final' 로 선언된 클래스를 볼 수 있다.
	다른 클래스가 이 클래스를 상속받지 못하게 함으로써 원래 동작이 바뀌지 않길 원하기 때문이다.
	예를들어 String 클래스도 final 로 선언되어 있다.

	String 의 핵심 기능을 바꾸지 못하도록 제한할 수 있다.

9.4 해석규칙

public interface A {
	default void hello() {
		System.out.println("Hello from A");
	}
}

public interface B {
	default void hello() {
		System.out.println("Hello from B");
	}
}

public class C implements B, A {
	public static void main(String .. args) {
		new C().hello();
	}
}

9.4.1 알아야할 3가지 해결 규칙.

	'1' : 클래스가 항상 이긴다. 클래스나 슈퍼클래스에서 정의한 메서드가 디폴트 메서드보다 우선권을 갖는다.
	'2' : 1번 규칙 이외의 상황에서는 서브인터페이스가 이긴다. 상속관계를 갖는 인터페이스에서 같은 시그너처를 갖는 메서드를 정의할때는 서브인터페이스가 이긴다.
	즉, B 가 A 를 상속받는다면 B 가 A 를 이긴다.
	'3' : 여전히 디폴트 메서드의 우선순위가 결정되지 않았다면 여러 인터페이스를 상속받는 클래스가 명시적으로 디폴트 메서드를 오버라이드하고 호출해야 한다.


9.4.4 다이아몬드 문제

Chapter 10. null 대신 Optional
10.3.5 두 Optional 합치기 / 326p


	Optional<Insurance> optInsurance = ...;
	optInsurance.filter(Insurance -> "CambrideInsurance".equals(Insurance.getName())
					.ifPresent(x -> System.out.println("ok")));

10.4.2 예외와 Optional
	자바 API 에서 어떤 이유에서 값을 제공할 수 없을때 null 대신 예외를 발생시킬 떄가 있다.
	Integer.ParseInt(String) 정적 메서드가 정수로 바꾸지 못할때 NumberFormatException 을 발생시킨다.

	정수로 변환할 수 없는 문자열 문제를 빈 Optional 로 해결할 수 있다.
	즉, parseInt 가 Optional 을 반환하도록 모델링할 수 있다.

	public static Optional<Integer> stringToInt(String s) {
		try {
			return Optional.of(Integer.parseInt(s));
		} catch (NumberFormatException e) {
			return Optional.empty(); <- 그렇지 않으면 빈 Optional 을 반환한다.
		}
	}

기본형 Optional 과 이를 사용하지 말아야 하는 이유

Properties props = new Properties();
props.setProperty("a", "5");
props.setProperty("b", "true");
props.setProperty("c", "-3");

assertEquals(5, readDuration(param, "a"));
assertEquals(0, readDuration(param, "b"));
assertEquals(0, readDuration(param, "c"));
assertEquals(0, readDuration(param, "d"));

양수외에는 전부다 0 을 반환한다.

프로퍼티에서 지속시간을 읽는 명령형 코드
public int readDuration (Properties props, String name) {
	String value = props.getProperty(name);
	if (value != null) {
		try {
			int i = Integer.parseInt(value);
			if (i > 0) {
				return i;
			}
		} catch(NumberFormatException nfe) {

		}
		return 0;
	}
}


try/catch 로 인해 가독성이 떨어진다.
public int readDuration(Properties props, String name) {
	return Optional.ofNullable(props.getProperty(name))
				.flatMap(OptionalUtility::stringToInt)
				.filter(i -> i > 0)
				.orElse(0);
}


Chapter 11. Completablefuture: 조합할 수 있는 비동기 프로그래밍

11.4.3 동기 작업과 비동기 작업 조합하기.














